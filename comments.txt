{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1) \ul time complexity - moves\ulnone \
\
loop through a 2d array to find the pieces of 1 colour\
and for each pieces, find possible adjacent moves (up down left right) (or even jumping pass piece)\
\
to find all pieces takes O(n^2) loop through 2d array\
\
if m = operation finding possible move\
\
for every piece, it find possible move\
\
time complexity = O (n^2 x m)\
\
\ul space complexity\ulnone \
\
memory space to consider: 2d array, piece, adjacent moves\
\
since pieces never multiple nor occupy more than it should, it only calculates the adjacent moves.\
the space complexity should be O(n)\
\
\
2) for this assignment, we see the game pieces trying to find where it should go, and how it should go. Therefore it\'92s a matter of searching the board. We implemented Breadth first search for each piece, to find the total cost to move to every spot in the map, and store as a Piece class attribute.\
\
The maximum search depth is the same as our minimum search depth, because we explore the whole 8 X 8 board. \
Our algorithm chooses the shortest cost to move one or two white piece to kill a black piece at any given time. It\'92s not necessarily the shortest move to eliminate all enemy pieces because it doesn\'92t take in account of future moves. And instead it chooses the shortest cost to kill, at each time.}